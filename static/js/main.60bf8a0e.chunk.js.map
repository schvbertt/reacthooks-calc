{"version":3,"sources":["components/ExpenseItem.js","components/ExpenseList.js","components/ExpenseForm.js","components/Alert.js","components/HomeAlert.js","App.js","serviceWorker.js","index.js"],"names":["ExpenseItem","expense","handleEdit","handleDelete","id","charge","amount","className","onClick","aria-label","ExpenseList","expenses","clearItems","map","key","length","ExpenseForm","handleCharge","handleAmount","handleSubmit","edit","onSubmit","htmlFor","type","name","placeholder","value","onChange","Alert","text","HomeAlert","homeAlert","handleHomeAlert","initialExpenses","localStorage","getItem","JSON","parse","App","useState","setExpenses","setCharge","setAmount","show","alert","setAlert","setEdit","setId","setHomeAlert","useEffect","setItem","stringify","handleAlert","setTimeout","e","target","preventDefault","tempExpenses","item","singleExpense","uuidv4","filter","find","reduce","acc","curr","parseInt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.60bf8a0e.chunk.js","sourcesContent":["import React from 'react'\r\nimport {MdEdit, MdDelete} from 'react-icons/md'\r\nconst ExpenseItem = ({expense, handleEdit, handleDelete}) => {\r\n    const {id, charge, amount} = expense\r\n\r\n    return (\r\n        <li className='item'>\r\n            <div className='info'>\r\n                <span className='expense'>\r\n                    {charge}\r\n                </span>\r\n                <span className='amount'>\r\n                    ${amount}\r\n                </span>\r\n            </div>\r\n            <div>\r\n                <button \r\n                className='edit-btn' \r\n                onClick={() => handleEdit(id)}\r\n                aria-label='edit button'\r\n                >\r\n                    <MdEdit />\r\n                </button>\r\n\r\n                <button \r\n                className='clear-btn' \r\n                onClick={() => handleDelete(id)}\r\n                aria-label='delete button'\r\n                >\r\n                    <MdDelete />\r\n                </button>\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default ExpenseItem\r\n","import React from 'react'\r\nimport Item from './ExpenseItem'\r\nimport {MdDelete} from 'react-icons/md'\r\n\r\nconst ExpenseList = ({expenses, handleEdit, handleDelete, clearItems}) => {\r\n    return (\r\n        <>\r\n            <ul className='list'>\r\n                {expenses.map((expense) => {\r\n                    return <Item \r\n                    key={expense.id} \r\n                    expense={expense} \r\n                    handleDelete={handleDelete}\r\n                    handleEdit={handleEdit}\r\n                    />\r\n                })}\r\n            </ul>\r\n            {expenses.length > 0 && \r\n            <button className='btn' onClick={clearItems}>\r\n                clear expenses\r\n                <MdDelete className='btn-icon' />\r\n            </button>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ExpenseList\r\n","import React from 'react'\r\nimport {MdSend} from 'react-icons/md'\r\n\r\nconst ExpenseForm = ({\r\n    charge, \r\n    amount, \r\n    handleCharge, \r\n    handleAmount, \r\n    handleSubmit,\r\n    edit\r\n}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className='form-center'>\r\n                <div className='form-group'>\r\n                    <label htmlFor='charge'>charge</label>\r\n                    <input\r\n                        type='text'\r\n                        className='form-control'\r\n                        id='charge'\r\n                        name='charge'\r\n                        placeholder='e.g. rent'\r\n                        value={charge}\r\n                        onChange={handleCharge}\r\n                    />\r\n                </div>\r\n\r\n                <div className='form-group'>\r\n                    <label htmlFor='amount'>amount</label>\r\n                    <input\r\n                        type='number'\r\n                        className='form-control'\r\n                        id='amount'\r\n                        name='amount'\r\n                        placeholder='e.g. 100'\r\n                        value={amount}\r\n                        onChange={handleAmount}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <button type='submit' className='btn'>\r\n                {edit ? 'edit' : 'submit'}\r\n                <MdSend className='btn-icon' />\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default ExpenseForm\r\n","import React from 'react'\r\n\r\nconst Alert = ({type, text}) => {\r\n    return (\r\n        <div className={`alert alert-${type}`}>\r\n            {text}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import React from 'react'\r\n\r\nexport default function HomeAlert({homeAlert, handleHomeAlert}) {\r\n    return (\r\n        <div className={homeAlert ? 'homealert' : 'hideAlert'}>\r\n            <span className=\"closebtnhome\" onClick={handleHomeAlert}>&times;</span> \r\n            <span>\r\n                This project was made with somebody's template.\r\n                Everything from logical side was made by myself\r\n                as is fully understandable for me.\r\n                </span>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport ExpenseList from './components/ExpenseList';\nimport ExpenseForm from './components/ExpenseForm';\nimport Alert from './components/Alert';\nimport { v4 as uuidv4 } from 'uuid';\nimport HomeAlert from './components/HomeAlert';\n\n// const initialExpenses = [\n//   {id: uuidv4(), charge: 'rent', amount: 1600},\n//   {id: uuidv4(), charge: 'car payment', amount: 400},\n//   {id: uuidv4(), charge: 'credit car bill', amount: 1200}\n// ]\n\nconst initialExpenses = localStorage.getItem('expenses')\n? JSON.parse(localStorage.getItem('expenses'))\n: []\n\n\nfunction App() {\n  // ***************** STATE VALUES *****************\n  // all expenses, add expense\n  const [expenses, setExpenses] = useState(initialExpenses)\n  // single expense\n  const [charge, setCharge] = useState('')\n  // single amount\n  const [amount, setAmount] = useState('')\n  // alert \n  const [alert, setAlert] = useState({show: false})\n  // edit\n  const [edit, setEdit] = useState(false)\n  // edit item\n  const [id, setId] = useState(0)\n  // home alert\n  const [homeAlert, setHomeAlert] = useState(true)\n  // ***************** USE EFFECT *****************\n  useEffect(() => {\n    localStorage.setItem('expenses', JSON.stringify(expenses))\n  }, [expenses])\n  // ***************** FUNCTIONALITY *****************\n\n  // handle charge\n  const handleCharge = e => {\n    setCharge(e.target.value)\n  }\n\n  // handle amount\n  const handleAmount = e => {\n    setAmount(e.target.value)\n  }\n\n  // handle alert\n  const handleAlert = ({type, text}) => {\n    setAlert({show: true, type, text})\n     let timer = setTimeout(() => {\n      setAlert({show: false})\n    }, 3000)\n  }\n  const handleSubmit = e => {\n    e.preventDefault()\n    if (charge !== '' && amount > 0) {\n        if(edit) {\n          let tempExpenses = expenses.map(item => {\n            return item.id === id? {...item, charge: charge, amount: amount} : item\n          })\n          setExpenses(tempExpenses)\n          setEdit(false)\n          handleAlert({type: 'success', text: 'item edited'})\n        } else {\n          const singleExpense = {id: uuidv4(), charge: charge, amount: amount};\n          setExpenses([...expenses, singleExpense])\n          handleAlert({type: 'success', text: 'item added'})\n        }\n\n      setCharge('')\n      setAmount('')\n    } else {\n      handleAlert({type: 'danger',\n      text: `charge can't be empty value and amount value has to be bigger than zero`})\n    }\n    \n  }\n\n  // clear all items\n  const clearItems = () => {\n    setExpenses([])\n    handleAlert({type: 'danger', text: 'all items deleted'})\n  }\n  \n  // handle delete\n  const handleDelete = (id) => {\n    let tempExpenses = expenses.filter\n      (item => item.id !== id)\n\n    setExpenses(tempExpenses)\n    handleAlert({type: 'danger', text: 'item deleted'})\n  }\n\n  // handle edit\n  const handleEdit = (id) => {\n    let expense = expenses.find(\n      (item) => item.id === id)\n    \n    let {charge, amount} = expense\n\n    setCharge(charge)\n    setAmount(amount)\n    setEdit(true)\n    setId(id)\n  }\n\n  // handle home alert\n  const handleHomeAlert = () => {\n    setHomeAlert(false)\n  }\n\n  return (\n    <>\n    <HomeAlert \n    homeAlert={homeAlert}\n    handleHomeAlert={handleHomeAlert}\n    />\n    {alert.show && \n    <Alert \n    type={alert.type}\n    text={alert.text}\n    />}\n      <h1>budget calculator</h1>\n\n    <main className='App'>\n      <ExpenseForm\n      charge={charge}\n      amount={amount}\n      handleCharge={handleCharge}\n      handleAmount={handleAmount}\n      handleSubmit={handleSubmit}\n      edit={edit}\n      />\n      <ExpenseList\n      expenses={expenses}\n      handleDelete={handleDelete}\n      handleEdit={handleEdit}\n      clearItems={clearItems}\n      />\n    </main>\n\n    <h1>\n      total spending: <span className='total'>\n        $\n        {expenses.reduce((acc, curr) => {\n          return (acc += parseInt(curr.amount))\n        }, 0)}\n      </span>\n    </h1>\n    </>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}